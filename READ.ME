This is a web page based application for managing a catagory-item system, which uses sqlalchemy+flask framework.
running environment requires python 2.7, flask, sqlalchemy, and oauth2client packages.

Templates folder contains some page templates which is stylized by bootstrap.

database_setup.py creates a relational database and populate.py can populate the database with some example instances. 
main.py can start the server and responses to HTML requests.
   GET '/' or '/catalog':
     return catagories and latest 10 items
   GET '/catalog/json':
     return a json listing all the catalogies
   GET '/login':
     direct the user to a login page providing gplus and github oauth login
   GET '/logout':
     let the user logout according to login method and redirect to the '/login'
   GET '/catalog/:catalog_id':
     return catagories and the items in the catagory having id equal to catalog_id
   POST '/catalog/new':
     create catagory called request.form['name'] and redirect to '/catalog/:new_catalog_id'
   POST '/catalog/:catlog_id/edit':
     change the catagory's name into request.form['name'] and redirect to '/catalog/:catalog_id'
   POST '/catalog/:catlog_id/edit':
     delete the catagory and redirect to '/catalog/'
   GET '/catalog/:catalog_id/json'
     return a json listing all the details of all catagories
   GET '/item/:item_id':
     return the page displaying an item
   POST '/item/:catalog_id/new':
     create an item in the catagory whose id is equal to catalog_id and redirect to '/item/:new_item_id'
   POST '/item/:item_id/edit':
     change the item's name/picture/description into request.form['name']/request.form['picture']/request.form['description'] and redirect to '/item/:item_id'
   POST '/catalog/:catlog_id/edit':
     delete the item and redirect to '/catalog/'
   GET '/catalog/:item_id/json'
     return a json listing the property of the item
